
(define (max a b)
  (cond ((> a b) a)
        (true b)))
(define (min a b)
  (cond ((< a b) a)
        (true b)))

(define (makerat a b)
  (cons a (cons b nil)))
(define (divisor r)
  (car (cdr r)))
(define (numerator r)
  (car r))
(var (int_limit 16384))

(define (bigger r)
  (max (numerator r) (divisor r)))
(define (simplify_more S R)
  (makerat (/ (numerator R) S)
           (/ (divisor R) S)))
(define (simplify R)
  (simplify_more
       (max (/
             (bigger R)
             (@ int_limit))
            1)
       R))
;(simplify (makerat 5 12))
(define (add_rat a b)
  (simplify
   (makerat
    (+ (* (numerator a)
          (divisor b))
       (* (numerator b)
          (divisor a)))
    (* (divisor a)
       (divisor b)))))
;(max
; (/ (bigger (makerat 10 8)) (int_limit))
; 9)
;(simplify (makerat 10 8))
;(add_rat (makerat 1 2)
;         (makerat 3 4))
(define (additive_inverse_rat r)
  (makerat
       (- 0 (numerator r))
       (divisor r)))
;(additive_inverse_rat (makerat 5 6))
(define (sub_rat a b)
  (add_rat a (additive_inverse_rat b)))
;(sub_rat (makerat 5 4) (makerat 1 4))
(define (multiplicative_inverse r)
  (makerat
   (divisor r)
   (numerator r)))
;(multiplicative_inverse (makerat 4 5))
(define (mul_rat a b)
  (simplify
   (makerat
    (* (numerator a)
       (numerator b))
    (* (divisor a)
       (divisor b)))))
;(mul_rat (makerat 5 6) (makerat 1 2))
(define (div_rat a b)
  (mul_rat a (multiplicative_inverse b)))
;(div_rat (makerat 1 2) (makerat 2 1))
(define (<rat a b)
  (< (* (numerator a)
        (divisor b))
     (* (divisor a)
        (numerator b))))
;(<rat (makerat 4 2)
;      (makerat 3 4))
(define (>rat a b)
  (not (<rat a b)))

(define (square_rat a)
  (mul_rat a a))
;(mul_rat (makerat 1 4))
;             (makerat 3 4))))

(define (pos_diff_rat a b)
  (cond ((>rat a b) (sub_rat a b))
         (true (sub_rat b a))))
;(pos_diff_rat (makerat 1 2)
;              (makerat 5 4))
;1
;4 4 4
;1

(define (average x y)
  (mul_rat (add_rat x y)
           (makerat 1 2)))
;(mul_rat (makerat 5 6) (makerat 1 2))
;(average (makerat 1 2)
;             (makerat 1 3))
(define (improve x guess)
  (average guess (div_rat x guess)))
;(improve (makerat 2 1)
;             (makerat 2 1))
(define (good_enough guess x)
  (<rat (pos_diff_rat
         (square_rat guess)
         x)
        (makerat 1 100)))
;(good_enough (makerat 20001 15000)
;                  (makerat 4 1))

(define (sqrt2 X Guess)
  (cond ((good_enough Guess X) Guess)
        (true (sqrt2 X (improve X Guess)))))
(define (sqrt X)
  (sqrt2 X (makerat 1 1)))
(sqrt (makerat 9 1))

